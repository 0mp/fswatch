.\"   $Id$
.\"
.\"   Man page for the @FSWATCH@ command.
.\"
.\"   $Log$
.\"
.Dd @MAN_DATE@
.Dt "@FSWATCH@" "7" "@FSWATCH@ file system monitor"
.Os "@TARGET_VENDOR@" "@TARGET_OS@"
.An Enrico Maria Crisostomo
.Ad enrico.m.crisostomo@gmail.com
.Pp
.Sh NAME
.Nm @FSWATCH@
.Nd Ask for notification when the contents of the specified files or directory
hierarchies are modified.

.Sh SYNOPSIS
.Nm @FSWATCH@
.Op Fl 0EhILmnortuvx
.Op Fl e Ar regexp
.Op Fl f Ar format-time
.Op Fl i Ar regexp
.Op Fl l Ar latency

.Sh DESCRIPTION
The 
.Nm
command receives notifications when the contents of the specified files or
directories are modified.
@FSWATCH@ implements three kind of monitors:
.Bl -tag -width indent

.It -
A monitor based on the File System Events API of Apple OS X.

.It -
A monitor based on kqueue, an event notification interface introduces in
FreeBSD 4.1 and supported on most *BSD systems (including OS X).

.It -
A monitor based on inotify, a Linux kernel subsystem that reports file system changes to applications.

.It -
A monitor which periodically stats the file system, saves file modification
times in memory and manually calculates changes.

.El

.Nm
writes a record for each event it receives containing:
.Bl -tag -width indent
.It -
The timestamp when the event was
.Em received
(optionally).

.It -
The path affected by the current event.
.It -
A space-separated list of
.Em event types
(see 
.Sx EVENT TYPES
).
.El

.Pp
.Nm
enters an infinite loop and never returns.
When it receives a SIGABRT, SIGINT or SIGTERM signal,
.Nm
closes the notification streams and exits gracefully returning 0 to the calling
process.

.Pp
The following options are available:
.Bl -tag -width indent

.It Fl 0, -print0
Use the ASCII NUL character (\e0) as line separator.
Since file names can potentially contain any character but NUL, this option
assures that the output of @FSWATCH@ can be safely parsed using NUL as delimiter,
such as using xargs -0 and the shell builtin read -d ''. 

.It Fl e, -exclude Ar regexp
Exclude paths matching
.Ar regexp .
Multiple exclude filters can be specified using this option multiple times. 
See
.Sx FILTERING PATHS
for further information.

.It Fl E, -extended
Use extended regular expressions.

.It Fl f, -format-time Ar format
Print the event time using the specified
.Ar format .
Supported formats are specified by
.Sy strftime (3) .

.It Fl h, -help
Show the help message.

.It Fl i, -exclude Ar regexp
Include paths matching
.Ar regexp .
Multiple include filters can be specified using this option multiple times. 
See
.Sx FILTERING PATHS
for further information.

.It Fl I, -insensitive
Use case insensitive regular expressions.

.It Fl l, -latency Ar latency
Set the
.Ar latency 
in seconds.
The latency is a double value greater than 0.1.
Smaller values are currently not allowed in order not to compromise the
performance of the system.
The default latency is 1 second.

.It Fl L, -follow-links
Follow symbolic links.

.It Fl m, -monitor Ar name
Uses the monitor specified by
.Ar name .
The list of currently available monitors can be obtained using the
.Fl h
option.

.It Fl n, -numeric
Print the numeric value of the event flag, instead of the array of symbolic
names.
The numeric value of the event flags are system-specific and may vary across
different versions of OS X.
As a consequence, the use of numeric values is discouraged. 

.It Fl o, -one-per-batch
Print a single message with the number of change events.
 
.It Fl r, -recursive
Watch subdirectories recursively.  This option may not be supported on all
systems.

.It Fl t, -timestamp
Print the event timestamp.

.It Fl u, -utf-time
Print the event time in UTC format.
When this option is not specified, the time is printed using the system
.Em local
time, as defined by
.Sy localtime (3) .

.It Fl v, -verbose
Print verbose output.

.It Fl x, -event-flags
Prints the event flags.

.El

.Sh FILTERING PATHS
Received events can be filtered by path using regular expressions.
Regular expressions can be used to include or exclude matching paths.
The user can specify multiple filter expression in any order and the
.Em first
matching expression wins.

Other options govern how regular expressions are interpreted:
.Bl -tag -width indent
.It -
Regular expressions can be
.Em extended
if option
.Fl E
is specified.

.It -
Regular expressions can be
.Em case insensitive
if option
.Fl I
is specified.

.El

.Sh EVENT TYPES
The event types currently supported and the corresponding record symbols are:
.Bl -tag -width indent
.It -
kFSEventStreamEventFlagItemCreated, "created".

.It -
kFSEventStreamEventFlagItemRemoved, "removed".

.It -
kFSEventStreamEventFlagItemInodeMetaMod, "inodeMetaMod".

.It -
kFSEventStreamEventFlagItemRenamed, "renamed".

.It -
kFSEventStreamEventFlagItemModified, "modified".

.It -
kFSEventStreamEventFlagItemFinderInfoMod, "finderInfoMod".

.It -
kFSEventStreamEventFlagItemChangeOwner, "changeOwner".

.It -
kFSEventStreamEventFlagItemXattrMod, "xattrMod".

.It -
kFSEventStreamEventFlagItemIsFile, "isFile".

.It -
kFSEventStreamEventFlagItemIsDir, "isDir".

.It -
kFSEventStreamEventFlagItemIsSymlink, "isSymLink".

.El 

.Sh EXAMPLES
.Ss Basic Usage
.Nm
syntax is the following:
.Pp
.Dl $ fswatch [options] [paths] ...
.Pp
.Nm
will then output change events to standard output. By default, only the affected file name is printed.
However, many options are available to format the event record, including: 
.Bl -tag -width indent
.It -
The possibility of adding the event timestamp.
.It -
The possibility of adding the event mask in both textual and numerical form.
.El

The following command listens for changes in the current directory and events
are delivered every 5 seconds:
.Pp
.Dl "$ @FSWATCH@ -l 5 ."
.Pp 
The following command listens for changes in the current user home directory and
.Em /var/log :
.Pp
.Dl "$ @FSWATCH@ ~ /var/log"

.Ss Piping @FSWATCH@ Output to Another Process
Very often you wish to not only receive an event, but react to it.
The simplest way to do it is piping fswatch output to another process.
Since in UNIX and UNIX-like file system file names may potentially contain any character but
.Em NUL (\e0)
and the path separator
.Em (/) ,
.Nm
has a specific mode of operation when its output must be piped to another process.
When the
.Op Fl 0
option is used,
.Nm
will use the
.Em NUL
character as record separator, thus allowing any other character to appear in a path.
This is important because many commands and shell builtins (such as
.Em read )
split words and lines by default using the characters in
.Em $IFS ,
which by default contains characters which may be present (although rarely) in a file name, resulting in a wrong event path being received and processed.

.Pp
Probably the simplest way to pipe
.Nm
to another program in order to respond to an event is using
.Em xargs
:
.Pp
.Dl "$ fswatch -0 [opts] [paths] | xargs -0 -n 1 -I {} [command]"

.Pp In this example:
.Bl -tag -width indent
.It -
.Em fswatch -0
will split records using the
.Em NUL
character.

.It -
.Em xargs -0
will split records using the
.Em NUL
character. This is required to correctly match impedance with
.Nm
.

.It -
.Em xargs -n 1
will invoke command every command. If you want to do it every
.Em x
records, then use
.Em xargs -n x
.

.It -
.Em xargs -I {}
will substitute occurrences of
.Em {}
in command with the parsed argument. If the command you are running does not need the event path name, just delete this option. If you prefer using another replacement string, substitute
.Em {}
with yours.
.El

.Ss Bubbling Events
An often requested feature is being able to receive a single event "per batch", instead of receiving multiple events.
This use case is implemented by the
.Op Fl o, -one-per-batch
option which tells
.Nm
to dump a record containing the number of received events, without any other detail:
.Pp
.Dl $ fswatch -or /path/to/watch
.Dl 1
.Dl 10
.Dl [...]
.Pp
This is useful if, for example, you want to respond to change events in a way which is (or can easily be) path-independent (because you are not receiving any event detail) and you prefer to "bubble" events together to reduce the overhead of the command being executed.
A typical case is a directory synchronisation job whenever some files change.

.Ss Receiving a Single Event
Another requested feature is the possibility of receiving a single event and exit.
This is most useful when existing scripts processing events include the restart logic of
.Nm.
This use case is implemented by the
.Op Fl 1, -one-event
option:
.Pp
.Dl $ fswatch -1 /path/to/watch
.Dl /path/to/watch

.Sh DIAGNOSTICS
The
.Nm
utility exits 0 on success, and >0 if an error occurs.
.Sh COMPATIBILITY
This utility can be built on any system supporting at least one of the available
monitors.

.Sh BUGS
See
.UR
https://github.com/emcrisostomo/fswatch/issues
.UE
for open issues.
